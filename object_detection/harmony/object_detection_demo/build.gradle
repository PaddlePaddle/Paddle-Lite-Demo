import java.security.MessageDigest

// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.huawei.ohos.app'

//For instructions on signature configuration, see https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ide_debug_device-0000001053822404#section1112183053510
ohos {
    signingConfigs {
        debug {
            storeFile file('C:\\Users\\Wincent\\.ohos\\config\\auto_debug_object_detection_2850086000355299513.p12')
            storePassword '000000184860548DD5D25F752F0279843B89DB4A802117AA70A6FC7B7F146533542A02376E4C793D'
            keyAlias = 'debugKey'
            keyPassword '000000182249ED750A0CBDE873821EE12552AB8DA694C34370BB9C65F102F1E16E742FE76922AD93'
            signAlg = 'SHA256withECDSA'
            profile file('C:\\Users\\Wincent\\.ohos\\config\\auto_debug_object_detection_2850086000355299513.p7b')
            certpath file('C:\\Users\\Wincent\\.ohos\\config\\auto_debug_object_detection_2850086000355299513.cer')
        }
    }
    compileSdkVersion 7
    defaultConfig {
        compatibleSdkVersion 4
    }
}

buildscript {
    repositories {
        maven {
            url 'https://repo.huaweicloud.com/repository/maven/'
        }
        maven {
            url 'https://developer.huawei.com/repo/'
        }
    }
    dependencies {
        classpath 'com.huawei.ohos:hap:3.0.5.2'
        classpath 'com.huawei.ohos:decctest:1.2.7.2'
    }
}

allprojects {
    repositories {
        maven {
            url 'https://repo.huaweicloud.com/repository/maven/'
        }
        maven {
            url 'https://developer.huawei.com/repo/'
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar', '*.so'])
    implementation files('libs/PaddlePredictor.jar')

    def paddleLiteLibs = 'https://paddlelite-demo.bj.bcebos.com/libs/android/paddle_lite_libs_v2_10_rc.tar.gz'
    task downloadAndExtractPaddleLiteLibs(type: DefaultTask) {
        doFirst {
            println "Downloading and extracting Paddle Lite libs"
        }
        doLast {
            // Prepare cache folder for libs
            if (!file("cache").exists()) {
                mkdir "cache"
            }
            // Generate cache name for libs
            MessageDigest messageDigest = MessageDigest.getInstance('MD5')
            messageDigest.update(paddleLiteLibs.bytes)
            String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
            // Download libs
            if (!file("cache/${cacheName}.tar.gz").exists()) {
                ant.get(src: paddleLiteLibs, dest: file("cache/${cacheName}.tar.gz"))
            }
            // Unpack libs
            if (!file("cache/${cacheName}").exists()) {
                copy {
                    from tarTree("cache/${cacheName}.tar.gz")
                    into "cache/${cacheName}"
                }
            }
            // Copy PaddlePredictor.jar
            if (!file("libs/PaddlePredictor.jar").exists()) {
                copy {
                    from "cache/${cacheName}/java/PaddlePredictor.jar"
                    into "libs"
                }
            }
            // Copy libpaddle_lite_jni.so for armeabi-v7a and arm64-v8a
            if (!file("src/main/jniLibs/armeabi-v7a/libpaddle_lite_jni.so").exists()) {
                copy {
                    from "cache/${cacheName}/java/libs/armeabi-v7a/"
                    into "src/main/jniLibs/armeabi-v7a"
                }
            }
            if (!file("src/main/jniLibs/arm64-v8a/libpaddle_lite_jni.so").exists()) {
                copy {
                    from "cache/${cacheName}/java/libs/arm64-v8a/"
                    into "src/main/jniLibs/arm64-v8a"
                }
            }
        }
    }
    preBuild.dependsOn downloadAndExtractPaddleLiteLibs

    def paddleLiteModels = [
            [
                    'src' : 'https://paddlelite-demo.bj.bcebos.com/models/ssd_mobilenet_v1_pascalvoc_fp32_300_for_cpu_v2_10_rc.tar.gz',
                    'dest': 'src/main/assets/models/ssd_mobilenet_v1_pascalvoc_for_cpu'
            ]
    ]
    task downloadAndExtractPaddleLiteModels(type: DefaultTask) {
        doFirst {
            println "Downloading and extracting Paddle Lite models"
        }
        doLast {
            // Prepare cache folder for models
            String cachePath = "cache"
            if (!file("${cachePath}").exists()) {
                mkdir "${cachePath}"
            }
            paddleLiteModels.eachWithIndex { model, index ->
                MessageDigest messageDigest = MessageDigest.getInstance('MD5')
                messageDigest.update(model.src.bytes)
                String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
                // Download the target model if not exists
                boolean copyFiles = !file("${model.dest}").exists()
                if (!file("${cachePath}/${cacheName}.tar.gz").exists()) {
                    ant.get(src: model.src, dest: file("${cachePath}/${cacheName}.tar.gz"))
                    copyFiles = true; // force to copy files from the latest archive files
                }
                // Copy model file
                if (copyFiles) {
                    copy {
                        from tarTree("${cachePath}/${cacheName}.tar.gz")
                        into "${model.dest}"
                    }
                }
            }
        }
    }
    preBuild.dependsOn downloadAndExtractPaddleLiteModels
}
